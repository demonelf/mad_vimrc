" Make external commands work through a pipe instead of a pseudo-tty
"set noguipty

" You can also specify a different font, overriding the default font
"if has('gui_gtk2')
"  set guifont=Bitstream\ Vera\ Sans\ Mono\ 12
"else
"  set guifont=-misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1
"endif

" If you want to run gvim with a dark background, try using a different
" colorscheme or running 'gvim -reverse'.
" http://www.cs.cmu.edu/~maverick/VimColorSchemeTest/ has examples and
" downloads for the colorschemes on vim.org

" Source a global configuration file if available
"if filereadable("/etc/vim/gvimrc.local")
"  source /etc/vim/gvimrc.local
"endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"疯狂十六进制配置文件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"==============================帮助================================="
":setl (setlocal) 
":setg (setglobal)
"==============================帮助================================="


"==============================系统================================="
if has("win32")

"==============================Vundle================================="
filetype off  
" 此处规定Vundle的路径  
set rtp+=$VIM/vimfiles/bundle/vundle/  
call vundle#rc('$VIM/vimfiles/bundle/')  

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" original repos on github<br>Bundle 'mattn/zencoding-vim'  
Bundle 'drmingdrmer/xptemplate'  
   
" vim-scripts repos  
Bundle 'scrooloose/nerdtree'  
Bundle 'minibufexpl.vim'
Bundle 'winmanager' 
Bundle 'taglist.vim'
Bundle 'c.vim'
"Bundle 'AutoComplPop'
Bundle 'NeoComplCache'
Bundle 'snipMate'
Bundle 'OmniCppComplete'
Bundle 'kien/ctrlp.vim'
Bundle 'itchyny/lightline.vim'
Bundle 'NLKNguyen/papercolor-theme'
"Bundle 'L9'

filetype plugin indent on     " required!
"
"bundle分为三类：https://github.com/vim-scripts
"1.在Github vim-scripts 用户下的repos,只需要写出repos名称
"2.在Github其他用户下的repos, 需要写出"用户名/repos名"
"3.不在Github上的插件，需要写出git全路径
"
" Brief help  -- 此处后面都是vundle的使用命令
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
"==============================Vundle================================="

"==============================编码================================="
set keywordprg=sdcv
"编码设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"windows下： 

""""""""""""""字体""""""""""""""
"set guifont=courier_new:h12:cANSI
"set guifont=Monaco:h12:cANSI
"set guifont=consolas:h14:cANSI
"set guifont=Bitstream_Vera_Sans_Mono:h14:cANSI
"set guifont=Bitstream_Vera_Sans_Mono:h14.5:cANSI
set guifont=DejaVu_Sans_Mono_for_Powerline:h14.5:cANSI
set guifontwide=YouYuan:h14:cGB2312,Microsoft_Yahei:h16:cGB2312

""""""""""""""编码""""""""""""""
"设置文件的代码形式 
set encoding=utf-8 
set termencoding=utf-8 
set fileencoding=utf-8 
set fileencodings=utf-8,ucs-bom,cp936,chinese,latin-1

"解决菜单乱码   
source $VIMRUNTIME/delmenu.vim   
source $VIMRUNTIME/menu.vim  

"vim提示信息乱码的解决 
language messages zh_CN.utf-8 
""""""""""""""编码""""""""""""""



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
else
"在Linux种这样设置：

"等宽
set ambiwidth=double
"ubuntu下： 
set encoding=utf-8 
set fileencodings=ucs-bom,utf-8,cp936 
lang messages zh_CN.UTF-8 " 解决consle输出乱码

set guifont=YaHei\ Consolas\ Hybrid\ 12
"set guifontwide==YaHei\ Consolas\ Hybrid\ 12

" 查看方法输入:Man api_name gvim 乱码
"source $VIMRUNTIME/ftplugin/man.vim
" 映射之后就可以少按一下 Shift 键。
"cmap man Man
" 在普通模式下按下 K （大写）即可启动 man 查看光标下的函数。
"nmap K :Man <cword><CR>
endif
"==============================编码================================="
"linux下解决菜单乱码
"cd /usr/share/vim/vim72/lang
"sudo ln -s menu_zh_cn.utf-8.vim menu_zh_cn.utf8.vim

"关闭了vi兼容模式，并允许进行文件类型检测
set nocp
set nocompatible
source $VIMRUNTIME/vimrc_example.vim
"鼠标行为http://www.wangchao.net.cn/bbsdetail_70402.html
"鼠标的行为是Windows风格 -会影响块模式
"source $VIMRUNTIME/mswin.vim
"behave mswin
"鼠标的行为是X Window风格
"behave xterm
"设置按下鼠标右键之后像vim一样弹出菜单
set mousemodel=popup


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"diff 模式
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
	if &sh =~ '\<cmd'
		let cmd = '"' . $VIMRUNTIME . '\diff"'
		let eq = '""'    
	else
		let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"在normal模式下使用系统剪贴板(例如用y复制时)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set clipboard+=unnamed

"鼠标右键 y复制中键粘贴
set mouse=a
"自动切换目录
set autochdir
"显示行号
set nu!
"显示标尺
set ruler
"自动折行
set nowrap
"set wrap
"按完整单词折行
set nolinebreak
"set linebreak
"行宽（输入时自动插入换行符）
set textwidth=80
"set textwidth=0
"set linespace=6
"Tab为8
set tabstop     =4   "ts是tabstop的缩写
set softtabstop =4
set shiftwidth  =4
set expandtab
set ic               "设置搜索时忽略大小写
"对于已保存的文件，可以使用下面的方法进行空格和TAB的替换：
"TAB替换为空格：
":set ts=4
":set expandtab
":%retab!
"
"空格替换为TAB：
":set ts=4
":set noexpandtab
":%retab!
"
"加!是用于处理非空白字符之后的TAB，即所有的TAB，若不加!，则只处理行首的TAB。


"自动对齐
set autoindent
"智能对齐
set smartindent
"设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号
set showmatch
set nobackup "不产生临时文件

"vim隐藏工具栏和菜单栏,以及动态切换
set guioptions-=m
set guioptions-=T
map <silent> <F2> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=m <bar>
    \else <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=m <Bar>
    \endif<CR>

"在右下脚显示当前命令 注：要在set nocp之后
set showcmd
"水平滚动
set guioptions+=b

set lines=28 columns=84
"全屏显示
"if has("win32")
"	autocmd GUIEnter * simalt ~x
"else
"	autocmd GUIEnter * silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
"endif

"function Maximize_Window()
"    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
"endfunction

"==============================系统================================="


"==============================主题和样式================================="

"--------------------------"
"语法高亮
"colorscheme desert
syntax enable
syntax on
"--------------------------"
"设置主题 http://www.vi-improved.org/color_sampler_pack/
if has('gui_running')
    set background=light
else
    set background=dark
endif
set t_Co=256
"set background=dark
set background=light
colorscheme Tomorrow-Night-Eighties
"colorscheme EarthsongLight
"colorscheme summerfruit256
"colorscheme monokai-chris
"let solarized_underline = 0
"colorscheme solarized
"colorscheme SnappyLight
"colorscheme base16-ocean
"colorscheme dracula
"colorscheme PaperColor
"colorscheme lucario
"文件信息栏七彩主题
"colorscheme statusline

let g:lightline = {
            \ 'colorscheme': 'jellybeans',
            \ 'component': {
            \   'lineinfo': ' %3l:%-2v',
            \ },
            \ 'component_function': {
            \   'readonly': 'LightLineReadonly',
            \   'fugitive': 'LightLineFugitive'
            \ },
            \ 'separator': { 'left': '', 'right': '' },
            \ 'subseparator': { 'left': '', 'right': '' }
            \ }

function! LightLineReadonly()
    return &readonly ? '' : ''
endfunction
function! LightLineFugitive()
    if exists('*fugitive#head')
        let branch = fugitive#head()
        return branch !=# '' ? ''.branch : ''
    endif
    return ''
endfunction

"-----------------------光标样式-----------------------------
"显示坐标
"sorline cursorcolumn 
"set gcr=a:block-blinkon0
" 设置代码折叠
set foldenable
"如果发现文件类型为c或cpp，就启用折叠功能
"autocmd FileType c,cpp setl fdm=syntax | setl fen
"set foldmethod=syntax

"set fdm=manual          "手工定义折叠
"set fdm=indent          "更多的缩进表示更高级别的折叠
"set fdm=expr            "用表达式来定义折叠
set fdm=syntax          "用语法高亮来定义折叠
"set fdm=diff            "对没有更改的文本进行折叠
"set fdm=marker          "对文中的标志折叠

"缩进 
"autocmd FileType c,cpp set shiftwidth=3 | set expandtab 
"c,cpp缩进
"set cindent
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"注释颜色
"hi Comment ctermfg=1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"颜色主要有这三种属性：
"term 
"cterm					//设置为bold 则会很亮
"ctermfg					//设置从1~8 种基本颜色
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"==============================主题和样式================================="

"--------------------------------------------------------------------------------
" CVim :help csupport
"--------------------------------------------------------------------------------
let g:C_Comments		= "yes"         " 用C++的注释风格
let g:C_BraceOnNewLine	= "yes"         " '{'是否独自一行
let g:C_AuthorName		= "Demonelf"
let g:C_Project			= "F9"
let g:Cpp_Template_Function	= "c-function-description-demonelf"
let g:C_TypeOfH = "c"           " *.h文件的文件类型是C还是C++
"let g:C_LocalTemplateFile	= $RUNTIME"c-support/templates/Templates"
"let g:C_GlobalTemplateFile	= $VIMRUNTIME"//..//vimfiles/bundle/c.vim/c-support/templates"
"let g:C_GuiSnippetBrowser	= 'commandline'
"let g:C_GuiTemplateBrowser	= 'explorer'
"let g:C_CreateMenusDelayed	= 'yes'
"let g:C_LoadMenus		= 'no'
"============================补全==========================="
"map <F5> :!ctags -R<cr>
"生成带c++类成员提示的ctags 需OmniCppComplete


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"括号自动补全
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
":inoremap ( ()<ESC>i
":inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {}<ESC>i
":inoremap } <c-r>=ClosePair('}')<CR>
":inoremap [ []<ESC>i
":inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>
"
"function ClosePair(char)
"if getline('.')[col('.') - 1] == a:char
"return "\<Right>"
"else
"return a:char
"endif

"-- omnicppcomplete setting --
highlight Pmenu    guibg=darkgrey  guifg=black
highlight PmenuSel guibg=lightgrey guifg=black

set completeopt=menu,menuone
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 0 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype  in popup window
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DisplayMode=0 "类成员显示控制(是否显示全部公有(public)私有(private)保护(protected)成员)。 0 : 自动; 1 : 显示所有成员 
let OmniCpp_DefaultNamespaces=["std"]


" 自动关闭补全窗口
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"自动补全AutoComplPop 两个文件，一个是autoload目录下的acp.vim，另一个是plugin下的acp.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:AutoComplPop_Behavior = {
"\ 'c': [ {'command' : "\<C-x>\<C-o>",
"\ 'pattern' : ".",
"\ 'repeat' : 0}
"\ ]
"\}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"自动补全NeoComplCache 可代替AutoComplPop但配置复杂
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NeoComplCache_EnableAtStartup    = 1
let g:neocomplcache_enable_at_startup  = 1
let g:neocomplcache_enable_auto_select = 1 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"代码块的自动补全snipMate
"let g:snippets_dir = "/usr/share/vim/vimfiles/snippets/"
"let g:snippets_dir = "/home/demonelf/.vim/snippets"
if has("win32")
    let g:snippets_dir = "$VIMRUNTIME//..//vimfiles//bundle//snipMate//snippets"
endif

"============================补全==========================="


"============================快捷键=========================="
"保存
map <C-s> :w<CR>

"F4保存退出
map <F4> :wqa<CR>

map <F12> :NERDTreeToggle<CR>
imap <F12> <ESC>:NERDTreeToggle<CR>
let NERDTreeWinPos='right'
let NERDTreeIgnore = ['.*\.o$','.*\.ko$','.*\.gz$']  "忽略后缀为.o，.ko，.gz的文件。
let NERDTreeIgnore = ['cscope.files','GPATH','GRTAGS','GTAGS','tags']
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"cscope实现Source Insight功能
"source cscope_maps.Vim

set nocscopeverbose
"原因是/etc/vimrc中已经将cscope.out读入，在plugin中也读了一遍，这样就有两遍

set cscopetag
set cscopeprg=gtags-cscope
"set cscopequickfix=c-,d-,e-,f-,g0,i-,s-,t-
set csprg=gtags-cscope
"let g:GtagsCscope_Auto_Load = 1
"let g:GtagsCscope_Auto_Map = 1
let g:GtagsCscope_Absolute_Path = 1
let g:ProjDir=getcwd()

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"自动更新tags
"或者这个vim-addon-background-cmd 又或者装这个AutoTag插件，要求Vim6，且编译时要支持python。
if has("win32")
    function! UPDATE_TAGS()
        let _f_ = expand("%:p")
        let _cmd_ = 'silent !start /min ctags --append=no -n -f ' . '' . g:ProjDir . '' . '\tags --c++-kinds=+p --fields=+iaS --extra=+q ' . '' . _f_ . ''
        exec _cmd_
        "let _resp = system(_cmd_)
        let _cmd_ = 'silent !start /min global --single-update ' . '' . _f_ . ''
        exec _cmd_
        "let _resp = system(_cmd_)
        unlet _cmd_
        unlet _f_
        "unlet _resp
    endfunction
    "autocmd BufWritePost *.cpp,*.cc,*.h,*.c call UPDATE_TAGS()
else
    function! UPDATE_TAGS()
        let _f_ = expand("%:p")
        let _cmd_ = 'ctags -R --append=no -n -f ' . '' . g:ProjDir . '' . '/tags --c++-kinds=+p --fields=+iaS --extra=+q ' . '' . _f_ . ''
        let _resp = system(_cmd_)
        let _cmd_ = 'global --single-update ' . '' . _f_ . ''
        let _resp = system(_cmd_)
        unlet _cmd_
        unlet _f_
        unlet _resp
    endfunction
    "autocmd BufWritePost *.cpp,*.cc,*.h,*.c call UPDATE_TAGS()
endif

"set tags+=tags			"当前目录下
"set tags+=$HOME/ctags		"F11叠加的tag
if has("win32")
    if filereadable("C:\\cscope.out")
        "cs a C:\\cscope.out
    else
        "exec "!dir /s /b *.c *.h *.cpp *.hpp > C:\\cscope.files"
        "exec "!cscope -Rb -f cscope.out -i C:\\cscope.files"
        "cs add /tmp/cscope.out
    endif
    if filereadable("C:\\tags")
        "set tags+=C:\\tags
    else
        "exec "!ctags -f C:\\ctags -R --tag-relative=yes /usr/include"
        "set tags+=C:\\ctags
    endif

    if "makefile" ==? expand("%")
        autocmd BufWritePost *.cpp,*.cc,*.h,*.c call UPDATE_TAGS()
        if filereadable("GTAGS")
            cscope reset
            set nocscopeverbose
            exe "cs add GTAGS " . g:ProjDir
            set cscopeverbose
        else
            exec "silent !dir /s /b *.c *.h *.cc *.cpp *.hpp *.s > cscope.files"
            exec "silent !gtags"
            exec "silent !ctags -a -n -R -I --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=yes -L cscope.files"
            cscope reset
            set nocscopeverbose
            exe "cs add GTAGS " . g:ProjDir
            set cscopeverbose
        endif
    endif

    if $CSCOPE_DB  != ""
        cs add $CSCOPE_DB
    endif
else
    if filereadable("/usr/cscope.out")
        "cs add /usr/cscope.out
    else
        "exec "!find /usr/include -type f > /tmp/cscope.files"
        "exec "!cscope -Rbq -f /usr/cscope.out -i /tmp/cscope.files"
        "cs add /usr/cscope.out
    endif

    if filereadable("/usr/ctags")
        set tags+=/usr/ctags
    else
        "exec "!ctags -f /usr/ctags -R --tag-relative=yes /usr/include"
        set tags+=/usr/ctags
    endif

    if "makefile" ==? expand("%")
        autocmd BufWritePost *.cpp,*.cc,*.h,*.c *.s call UPDATE_TAGS()
        if filereadable("GTAGS")
            cscope reset
            set nocscopeverbose
            exe "cs add GTAGS " . g:ProjDir
            set cscopeverbose
        else
            exec "silent !find $PWD -type f > cscope.files"
            exec "silent !gtags -f cscope.files"
            exec "silent !ctags -a -n -R -I --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=yes -L cscope.files"
            cscope reset
            set nocscopeverbose
            exe "cs add GTAGS " . g:ProjDir
            set cscopeverbose
        endif

        if $CSCOPE_DB  != ""
            cs add $CSCOPE_DB
        endif
    endif
endif
"递归当前根目录
set autochdir
set tags+=tags;


"局部变量快捷键gd
"ctrl+p提示
"ctrl+x提示列表

"tags和cscope
" "ctrl+]"，光标会自动跳转到定义处
" "ctrl+T", 会跳回到原来的位置

if has("win32")

    map <C-F10> :call CscopeCreate()<CR>
    func! CscopeCreate()
        "cs kill -1
        "exec "!del cscope.out"
        exec "!del tags"
        exec "!dir /s /b *.c *.h *.cc *.cpp *.hpp > C:\\cscope.files"
        "exec "!cscope -Rb -f cscope.out -i C:\\cscope.files"
        exec "!ctags -a -n -R -I --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=yes -L C:\\cscope.files"
        exec "!global -u"
        "cs a C:\\cscope.out
        "cs a cscope.out
        cs add GTAGS
    endfunc

    function CreateProject()
        let g:ProjDir=getcwd()
    endfunction
    nmap <F11> :call CreateProject()<CR>

    "map <C-F11> :!ctags -f C:\\ctags -a -R -I --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=yes .<CR>

else

    map <C-F10> :call CscopeCreate()<CR>
    func! CscopeCreate()
        cs kill -1
        exec "!rm cscope.out"
        exec "!rm tags"
        exec "!find $PWD -type f > /tmp/cscope.files"
        "exec "!cscope -Rbq -f cscope.out -i /tmp/cscope.files"
        exec "!ctags -a -n -R -I --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=yes -L /tmp/cscope.files"
        exec "!global -u"
        "cs add /usr/cscope.out
        "cs add cscope.out
        cs add GTAGS
    endfunc

    function CreateProject()
        let g:ProjDir=getcwd()
    endfunction
    "nmap <F11> :call CreateProject()<CR>

    map <C-F11> :!ctags -f $HOME/ctags -a -n -R -I --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=yes .<CR>

endif

map <C-F12> :TlistToggle<CR>
" :Tlist              调用TagList/TagBar
let Tlist_Show_One_File=1                    " 只显示当前文件的tags
let Tlist_Exit_OnlyWindow=1                  " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Use_Right_Window=0                 " 在左侧窗口中显示
let Tlist_File_Fold_Auto_Close=1             " 自动折叠
let Tlist_GainFocus_On_ToggleOpen=0          " 打开taglist窗口时，如果希望输入焦点在taglist窗口中
let Tlist_Process_File_Always=1	             " 始终解析文件中的tag，不管taglist窗口有没有打开
let Tlist_Inc_Winwidth=0		     " 不扩大窗口

"设置winmanager的宽度，默认为25 
"let g:winManagerWidth = 30
"let g:winManagerWindowLayout = "TagList|FileExplorer"
"let g:winManagerWindowLayout = "TagList"
"nmap <silent> <C-F12> :WMToggle<cr>

"ctrlp 
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=30
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
let g:ctrlp_clear_cache_on_exit=0

"打开终端
if has("win32")
    map <silent> <F3> :silent !start<CR>
else
    map <silent> <F3> :silent !gnome-terminal &<CR>
endif
"用空格键来开关折叠
nnoremap <silent> <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" F5编译和运行C程序，F6编译和运行C++程序
" 请注意，下述代码在windows下使用会报错
" 需要去掉./这两个字符

" C的编译和运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    exec "!gcc -Wall -g % -o %<"
    if has("win32")
        exec "! %<"
    else
        exec "! ./%<"
    endif
endfunc

" C++的编译和运行
map <F6> :call CompileRunGpp()<CR>
func! CompileRunGpp()
    exec "w"
    exec "!g++ -Wall -g % -o %<"
    if has("win32")
        exec "! %<"
    else
        exec "! ./%<"
    endif
endfunc

" Make编译和运行
map <F7> :call CompileRunMakeClean()<CR>
func! CompileRunMakeClean()
    exec "make clean"
endfunc

map <F8> :call CompileRunMake()<CR>
func! CompileRunMake()
    exec "wall"
    exec "!make"
    if has("win32")
        exec "! main.exe"
    else
        exec "! ./main"
    endif
endfunc


"miniBufExplorer
"操作： d 关闭当前文件
"当处于有改动的缓冲区 有miniBufExplorer上有+符号 则新打开文件时是上下分屏的
let g:miniBufExplMapWindowNav       = 1
let g:miniBufExplMapWindowNavVim    = 1		"按下Ctrl+h/j/k/l，可以切换到当前窗口的上下左右窗口
let g:miniBufExplMapWindowNavArrows = 0		"按下Ctrl+箭头，可以切换到当前窗口的上下左右窗口
let g:miniBufExplMapCTabSwitchBufs  = 1		"启用以下两个功能：Ctrl+tab移到下一个窗口
let g:miniBufExplModSelTarget       = 1		"不要在不可编辑内容的窗口（如TagList窗口）中打开选中的buffer
let g:miniBufExplorerMoreThanOne    = 1		"
let g:miniBufExplMaxSize            = 1		"窗口最大高度
" MiniBufExpl Colors
hi MBENormal                 guifg=#F5F5F5   guibg=#4271ae
hi MBEChanged                guifg=#eeeeee   guibg=#4271ae
hi MBEVisibleNormal          guifg=#F5F5F5   guibg=#3e999f
hi MBEVisibleChanged         guifg=#eeeeee   guibg=#3e999f
"允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
"防止上下分屏
set hidden

"编程特殊配置
if expand("%:e") ==? "c" || expand("%:e") ==? "cpp" || expand("%:e") ==? "cxx" || expand("%:e") ==? "h" || expand("%") ==? "makefile"  
    "set linespace=6
    "set guifont=Bitstream_Vera_Sans_Mono:h14.5:cANSI
    "set guifontwide=Yahei_Mono:h12.5:cGB2312
    "source $VIMRUNTIME/../vimfiles/ftplugin/c.vim
    "set guifont=Meslo_LG_S_for_Powerline:h11
    "set guifontwide=YouYuan:h14:cGB2312,Microsoft_Yahei:h12.5:cGB2312
    "colorscheme molokai
    "文件信息栏七彩主题
    "colorscheme statusline
endif
filetype on
filetype plugin on
filetype indent on
"编程特殊配置

"============================快捷键=========================="

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"疯狂十六进制配置文件 2015-5-10
"最新配置请在官方网站下载:www.madhex.com
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
